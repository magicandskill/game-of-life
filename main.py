import pygame

def get_initial_state(config):
  def stateRow(str):
    out = []
    for cell in list(str):
      if(cell == '*'):
        out.append(True)
      else:
        out.append(False)

    return out

  return [stateRow(configRow) for configRow in config]

def is_in_bound(i):
  return i >= 0 and i <= 49

def has_neighbor(grid, i, j):
  return is_in_bound(i) and is_in_bound(j) and grid[i][j]

def get_neighbor_count(grid, i, j):
  count = 0
  if(has_neighbor(grid, i-1, j)): 
    count+=1
  if(has_neighbor(grid, i+1, j)): 
    count+=1
  if(has_neighbor(grid, i, j-1)): 
    count+=1
  if(has_neighbor(grid, i, j+1)): 
    count+=1
  if(has_neighbor(grid, i-1, j-1)): 
    count+=1
  if(has_neighbor(grid, i-1, j+1)): 
    count+=1
  if(has_neighbor(grid, i+1, j-1)): 
    count+=1
  if(has_neighbor(grid, i+1, j+1)): 
    count+=1
  return count

pygame.init()
screen = pygame.display.set_mode((500, 500))
clock = pygame.time.Clock()
running = True

initial_state = get_initial_state([
  '**__________________**____________________________',
  '******_______________*____________________________',
  '____****_____________*____________________________',
  '_______*_____________*____________________________',
  '_______*_____________*____________________________',
  '_______**____________*____________________________',
  '_____________*__******____________________________',
  '_____________*__*_________________________________',
  '_________*_******_________________________________',
  '_________**_*_____________________________________',
  '__________***_____________________________________',
  '____________*_____________________________________',
  '________*___*_____________________________________',
  '________**________________________________________',
  '_________*________________________________________',
  '_________*________________________________________',
  '_________*________________________________________',
  '_________*________________________________________',
  '_________*________________________________________',
  '_________*________________________________________',
  '**********************____________________________',
  '*____________________*____________________________',
  '_______*_____________*____________________________',
  '_______*_____________*____________________________',
  '_______*_____________*____________________________',
  '_______**____________*____________________________',
  '_____________*__******____________________________',
  '_____________*__*_________________________________',
  '_________*_******_________________________________',
  '_________**_*_____________________________________',
  '__________***_____________________________________',
  '____________*_____________________________________',
  '________*___*_____________________________________',
  '________**________________________________________',
  '_________*________________________________________',
  '_________*________________________________________',
  '_________*________________________________________',
  '_________*________________________________________',
  '_________*________________________________________',
  '_________*________________________________________',
  '_________****_____________________________________',
  '____________*_____________________________________',
  '________*****_____________________________________',
  '________**________________________________________',
  '_________*________________________________________',
  '_________*________________________________________',
  '__________________________________________________',
  '__________________________________________________',
  '__________________________________________________',
  '__________________________________________________',
])

state = { 
  'grid': initial_state
}

def bound_safe(num, bounds):
  if(num < bounds[0]):
    return bounds[0]
  elif(num > bounds[1]):
    return bounds[1]
  else:
    return num

def cell_rect(i, j):
  _i = bound_safe(i, (0, 49))
  _j = bound_safe(j, (0, 49))
  leftTop = (_j * 10, _i * 10)
  widthHeight = (10, 10)
  return pygame.Rect(leftTop, widthHeight)

def draw(gridState):
  for i, row in enumerate(gridState):
    for j, cell in enumerate(row):
      rect = cell_rect(i, j)
      if(cell):
        pygame.draw.rect(screen, "white", rect)
      else:
        pygame.draw.rect(screen, "black", rect)

def compute_new_state(grid_state):
  out = []
  for i, row in enumerate(grid_state):
    row_state = []
    for j, cell in enumerate(row):
      count = get_neighbor_count(grid_state, i, j)
      cell_state = count == 3 or count == 2 and cell
      row_state.append(cell_state)
    out.append(row_state)
  return out
  
while running:
  for event in pygame.event.get():
    if event.type == pygame.QUIT:
        running = False

  state['grid'] = compute_new_state(state['grid'])
  draw(state['grid'])

  pygame.display.flip()
  clock.tick(10)

pygame.quit()